[{"/Users/piotrek/git_musicascode/set-player/src/registerServiceWorker.ts":"1","/Users/piotrek/git_musicascode/set-player/src/App.tsx":"2","/Users/piotrek/git_musicascode/set-player/src/components/GitHubLogo.tsx":"3","/Users/piotrek/git_musicascode/set-player/src/Pattern.jsx":"4","/Users/piotrek/git_musicascode/set-player/src/components/Header.jsx":"5","/Users/piotrek/git_musicascode/set-player/src/components/Footer.jsx":"6","/Users/piotrek/git_musicascode/set-player/src/PlayersProvider.js":"7","/Users/piotrek/git_musicascode/set-player/src/TransportProvider.js":"8","/Users/piotrek/git_musicascode/set-player/src/Tracks.jsx":"9","/Users/piotrek/git_musicascode/set-player/src/Track.jsx":"10","/Users/piotrek/git_musicascode/set-player/src/Vis.jsx":"11","/Users/piotrek/git_musicascode/set-player/src/index.tsx":"12"},{"size":4534,"mtime":1610240579687,"results":"13","hashOfConfig":"14"},{"size":438,"mtime":1581246927661,"results":"15","hashOfConfig":"14"},{"size":1623,"mtime":1581247046990,"results":"16","hashOfConfig":"14"},{"size":1557,"mtime":1581189169068,"results":"17","hashOfConfig":"14"},{"size":210,"mtime":1610200841905,"results":"18","hashOfConfig":"14"},{"size":751,"mtime":1581189169072,"results":"19","hashOfConfig":"14"},{"size":1636,"mtime":1610240313884,"results":"20","hashOfConfig":"14"},{"size":442,"mtime":1610240399109,"results":"21","hashOfConfig":"14"},{"size":1842,"mtime":1581189169071,"results":"22","hashOfConfig":"14"},{"size":3576,"mtime":1610200841904,"results":"23","hashOfConfig":"14"},{"size":2498,"mtime":1583344394896,"results":"24","hashOfConfig":"14"},{"size":279,"mtime":1610241356686,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"b4lvet",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"29"},"/Users/piotrek/git_musicascode/set-player/src/registerServiceWorker.ts",["54"],"// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",[],"/Users/piotrek/git_musicascode/set-player/src/App.tsx",[],"/Users/piotrek/git_musicascode/set-player/src/components/GitHubLogo.tsx",[],"/Users/piotrek/git_musicascode/set-player/src/Pattern.jsx",[],"/Users/piotrek/git_musicascode/set-player/src/components/Header.jsx",[],"/Users/piotrek/git_musicascode/set-player/src/components/Footer.jsx",[],"/Users/piotrek/git_musicascode/set-player/src/PlayersProvider.js",[],"/Users/piotrek/git_musicascode/set-player/src/TransportProvider.js",[],"/Users/piotrek/git_musicascode/set-player/src/Tracks.jsx",[],"/Users/piotrek/git_musicascode/set-player/src/Track.jsx",[],"/Users/piotrek/git_musicascode/set-player/src/Vis.jsx",[],[],"/Users/piotrek/git_musicascode/set-player/src/index.tsx",["55"],"import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nregisterServiceWorker();\n",{"ruleId":null,"fatal":true,"severity":2,"message":"56","line":26,"column":29},{"ruleId":null,"fatal":true,"severity":2,"message":"57","line":7,"column":58},"Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 24 | \u001b[39m    \u001b[90m// The URL constructor is available in all browsers that support SW.\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 | \u001b[39m    \u001b[36mconst\u001b[39m publicUrl \u001b[33m=\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mURL\u001b[39m(\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 26 | \u001b[39m      process\u001b[33m.\u001b[39menv\u001b[33m.\u001b[39m\u001b[33mPUBLIC_URL\u001b[39m\u001b[33m!\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 27 | \u001b[39m      window\u001b[33m.\u001b[39mlocation\u001b[33m.\u001b[39mtoString()\u001b[0m\n\u001b[0m \u001b[90m 28 | \u001b[39m    )\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 29 | \u001b[39m    \u001b[36mif\u001b[39m (publicUrl\u001b[33m.\u001b[39morigin \u001b[33m!==\u001b[39m window\u001b[33m.\u001b[39mlocation\u001b[33m.\u001b[39morigin) {\u001b[0m","Parsing error: Unexpected token, expected \",\"\n\n\u001b[0m \u001b[90m 5 | \u001b[39m\u001b[36mimport\u001b[39m registerServiceWorker from \u001b[32m\"./registerServiceWorker\"\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 6 | \u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 7 | \u001b[39m\u001b[33mReactDOM\u001b[39m\u001b[33m.\u001b[39mrender(\u001b[33m<\u001b[39m\u001b[33mApp\u001b[39m \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m\u001b[33m,\u001b[39m document\u001b[33m.\u001b[39mgetElementById(\u001b[32m\"root\"\u001b[39m) as \u001b[33mHTMLElement\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   | \u001b[39m                                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 8 | \u001b[39mregisterServiceWorker()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 9 | \u001b[39m\u001b[0m"]